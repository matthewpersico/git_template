#!/opt/bb/bin/bash

##
## Various checks, pre-commit
##

## Don't do my checks if Perl testing involves git commands.
[ "$HARNESS_ACTIVE" = '1' ] && exit 0

pre_commit_ok_echo ()
{
    echo pre-commit hook: "$@"
}

pre_commit_error_echo ()
{
    echo 'ERROR>>>' pre-commit hook: "$@"
}

##
## args and opts
##
declare -A skips
declare opt_verbose=1
declare opt_a=0
declare moreopts
declare helpnotallowed=0
declare opt_a_notallowed=0
moreopts=1
if [ -n "$GIT_PRE_COMMIT_HOOK_ARGS" ] \
       || [ -n "$GPCHA" ]
then
    eval set -- "$GIT_PRE_COMMIT_HOOK_ARGS" "$GPCHA"
    helpnotallowed=1
    opt_a_notallowed=1
fi

while [[ "$1" =~ ^- ]] && ((moreopts))
do
    ## Strip all leading dashes here so that -foo and --foo can both
    ## be processed as 'foo'.
    declare original="$1"
    declare option
    option=$(dashstripper "$original")
    shift ## That way you avoid endless loops on invalid options.

    case $option in
        a)
            if((opt_a_notallowed))
            then
                pre_commit_ok_echo "--a not allowed in GIT_PRE_COMMIT_HOOK_ARGS. Ignoring."
            else
                opt_a=1
            fi
            ;;
        s|skip)
            skips[$1]=1;
            shift ;;
        q|quiet)
            opt_verbose=0 ;;
        x)
            set -x
            trap "set +x" EXIT
            ;;
        h|help)
            if((helpnotallowed))
            then
                pre_commit_ok_echo "--help not allowed in GIT_PRE_COMMIT_HOOK_ARGS. Ignoring."
            else
                pod2text "$0" | ${PAGER:cat}
                exit 0
            fi
            ;;
        --) shift; break ;; ## end of opts, remaining $*, if any, are args
        *) echo "Internal error!"; pod2text "$0" | ${PAGER:cat}; exit 1 ;;
    esac
done

##
## inits and globals
##

## We use a temp file to process output instead of $() capturing so we don't
## lose the newlines...
declare tfile
tfile=$(mktemp)

## ...and we set up a trap for cleanup
trap finish EXIT SIGINT

## Assume correctness
declare exitval=0

gitroot=$(git rev-parse --show-toplevel)

##
## Functions
##

finish ()
{
    if [ -e "$tfile" ]
    then
        rm -rf "$tfile"
    fi
}

check ()
{
    local tfile=$1
    shift
    local tcount
    tcount=$(wc -l "$tfile" | sed 's/ .*//')
    if [ "$tcount" != 0 ]
    then
        ## This is the error message
        echo
        pre_commit_error_echo "$1"
        cat "$tfile"
        exitval=1
        return 1
    else
        ## This is the ok message
        [ -n "$2" ] && ((opt_verbose==1)) && pre_commit_ok_echo "$2"
        return 0
    fi
}

##
## Main
##

##
## Get the list of files being committed
##
declare -a gitobjs
if ((opt_a))
then
    ## Like git's -a, process modified files even if not 'git add'ed
    readarray -t gitobjs < <(git status --porcelain  | perl -ane 'print $F[1],qq(\n) if m/^[ACM] / or m/^.[ACM]/')
else
    readarray -t gitobjs < <(git status --porcelain  | perl -ane 'print $F[1],qq(\n) if m/^[ACM] /')
fi
declare -a files
declare -a nonfiles
for obj in "${gitobjs[@]}"
do
    if [[ -f $obj ]]
    then
        files+=("$obj")
    else
        nonfiles+=("$obj")
    fi
done
declare -a delgitobjs
readarray -t delgitobjs < <(git status --porcelain  | perl -ane 'print $F[1],qq(\n) if m/^D /')
declare -a huhgitobjs
readarray -t huhgitobjs < <(git status --porcelain  | perl -ane 'print $F[1],qq(\n) if m/^\? /')

if ((opt_verbose))
then
    declare tmpf
    tmpf=$(mktemp)
    git status --porcelain 1>"$tmpf" 2>&1
    if [ -s "$tmpf" ]
    then
        pre_commit_ok_echo Current status:
        cat "$tmpf"
    fi
    \rm -f "$tmpf"

    declare fcount
    declare text

    fcount=${#files[@]}
    text='files to process'
    (( fcount == 1 )) && text='file to process'
    pre_commit_ok_echo "$fcount" "$text"

    fcount=${#nonfiles[@]}
    text='non-files to process'
    (( fcount == 1 )) && text='non-file to process'
    (( fcount > 0 )) && pre_commit_ok_echo "$fcount" "$text"

    fcount=${#delgitobjs[@]}
    text='git objects to be skipped because they are being deleted'
    (( fcount == 1 )) && text='git object to be skipped because it is being deleted'
    (( fcount > 0 )) && pre_commit_ok_echo "$fcount" "$text"

    fcount=${#huhgitobjs[@]}
    text='git objects to be skipped because they are not being tracked'
    (( fcount == 1 )) && text='git object to be skipped because it is not being tracked'
    (( fcount > 0 )) && pre_commit_ok_echo "$fcount" "$text"
fi

##
## Do filtering
##
declare -A fileskips
declare ignore_file="$gitroot/.pre-commit-ignore"
if [[ -r "$ignore_file" ]]
then
    while read -r fs
    do
        fileskips[$fs]=1
    done < <(cat "$ignore_file")

    declare -a filtered_files
    declare file
    for file in "${files[@]}"
    do
        if [ -z "${fileskips[$file]}" ]
        then
            filtered_files+=("$file")
        fi
    done
    files=("${filtered_files[@]}")
fi

##
## Isolate groups of files here.
##
declare -a perlfiles
declare -a shellfiles
declare do_shellcheck=0
declare file

{ [ -z "${skips[shellcheck]}" ] && [ -z "${skips[shell]}" ] ; } \
    && shellcheck -V 1>/dev/null 2>&1 && do_shellcheck=1
for file in "${files[@]}"
do
    if head -1 "$file" | grep perl | grep -E '^#!' > /dev/null \
            ||
            echo "$file" | grep -iE '\.(p[ml]|t|sgi)$' > /dev/null
    then
        perlfiles+=("$file")
    elif head -1 "$file" | grep -E -- '-\*- sh|env bash|/bash|/sh' 1>/dev/null 2>&1
    then
        shellfiles+=("$file")
    fi
done

##
## The tests...
##

if ((${#files[@]}))
then
    touch "$tfile"

    ##
    ## check: files being edited, not saved
    ##
    for i in "${files[@]}"
    do
        emacsfile="$(dirname "$(realpath "$i")")/.#$(basename "$i")"
        if [ -h "$emacsfile" ]
        then
            echo "$i" >> "$tfile"
        fi
    done
    check "$tfile" \
          "Write your emacs buffers for these files:" \
          "" ##"No open emacs buffers."

    ##
    ## check: constructs for bypassed or dead code
    ##

    ## These two are Perl constructs, but we could use them temporarily in any
    ## file type.
    grep -H -n -E -i '=for (later|comparison|commentout|review)' "${files[@]}" 1>"$tfile" 2>&1
    check "$tfile" \
          "One or more files contain suspicious Perl commenting. Delete old code, do not just comment it out. Don't add inactive code until you are ready to use it." \
          "" #"No suspicious Perl commenting, old code."

    grep -H -n -E -i '=for (remove|restore)_before_commit' "${files[@]}" 1>"$tfile" 2>&1
    check "$tfile" \
          "One or more files contain suspicious Perl commenting. Put back original code; remove your short term test changes." \
          "" #"No suspicious Perl commenting, test code."

    if ((${#perlfiles[@]}))
    then
        ##
        ## check: Perl debug statements
        ##
        # shellcheck disable=2016
        grep -H -n -E '\$DB::s(ingle|tep)' "${perlfiles[@]}" 1>"$tfile" 2>&1
        check "$tfile" \
              "One or more files has Perl-debugger-related statements. Please remove instrumentation." \
              "" #"No Perl-debugger-related statements."

        ##
        ## check: testing utilities left in the code
        ## BB SPECIFIC
        ##
        grep -H -n -E 'TestingUtils' "${perlfiles[@]}" | grep -v TestingUtils.pm  1>"$tfile" 2>&1
        check "$tfile" \
              "One or more files is using the TestingUtils module. Please remove it." \
              "" #"TestingUtils module not found."

        ##
        ## check: repo compile tests
        ##
        if [ -n "${skips[perlcompile]}" ] \
               || [ -n "${skips[perl]}" ]
        then
            ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl compile check, by request."
        else
            runcheck=0
            if [ -e "$gitroot/t/bin/apply-compile-check-everywhere" ]
            then
                cartonexec=''
                if [ -e "$gitroot/runtests.local" ]
                then
                    pre_commit_ok_echo "Sourcing $gitroot/runtests.local for perl compile tests."
                    # shellcheck disable=SC1090
                    . "/$gitroot/runtests.local"
                    if [ "$RUNTESTS_USE_CARTON" = '1' ]
                    then
                        cartonexec='carton exec'
                    fi
                fi
                $cartonexec "$gitroot/t/bin/apply-compile-check-everywhere" "${perlfiles[@]}" 1>"$tfile" 2>&1
                runcheck=1
            elif [ -e "${TILDAE:-$HOME}/personal/bin/apply-compile-check-everywhere" ]
            then
                "${TILDAE:-$HOME}/personal/bin/apply-compile-check-everywhere" "${perlfiles[@]}" 1>"$tfile" 2>&1
                runcheck=1
            else
                ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl compile check, no perl compile check helpers found."
            fi
            ((runcheck==1)) && check "$tfile" \
                                     "One or more files has syntax errors. Please review." \
                                     "" #"No Perl compile errors."
        fi

        ##
        ## check: repo tidy tests
        ##

        ## If the repo has them, piggy back off of them
        if [ -n "${skips[perltidy]}" ] \
               || [ -n "${skips[perl]}" ]
        then
            ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl perltidy check, by request."
        else
            runcheck=0
            if [ -e "$gitroot/t/bin/apply-perltidy-everywhere" ]
            then
                "$gitroot/t/bin/apply-perltidy-everywhere" "${perlfiles[@]}" 1>"$tfile" 2>&1
                runcheck=1
            elif [ -e "${TILDAE:-$HOME}/personal/bin/apply-perltidy-everywhere" ]
            then
                "${TILDAE:-$HOME}/personal/bin/apply-perltidy-everywhere" "${perlfiles[@]}" 1>"$tfile" 2>&1
                runcheck=1
            else
                ((opt_verbose)) && pre_commit_ok_echo "Skipping Perl perltidy, no perl perltidy helpers found."
            fi
            ((runcheck==1)) && check "$tfile" \
                                     "One or more files has formatting errors. Please review." \
                                     "" #"No Perl perltidy errors."
        fi
    fi

    if ((${#shellfiles[@]}))
    then
        if ((do_shellcheck==1))
        then
            shellcheck "${shellfiles[@]}" 1>"$tfile" 2>&1
            check "$tfile" \
                  "One of more files has failed shellcheck checks. Please review." \
                  "" #"No shellcheck errors."
        else
            echo "Skipping shell checks, 'shellcheck' not found."
        fi
    fi

    ##
    ## check; git conflict markers
    ##
    grep -H -n -E '^<<<<<<<|>>>>>>>$' "${files[@]}" 1>"$tfile" 2>&1
    check "$tfile" \
          "One or more files contains a git conflict marker. Please address." \
          "" #"No git conflict markers."

    ##
    ## check: git commit stop check
    ##

    ## As a last resort, we allow the text strings <gitcommitstop> and <GCS>,
    ## usually as comment in the given language, to be used to stop the commit
    ## of code that we know we need to clean up before committing. In the
    ## limited number of utilities that manipulate files with GCS, we add the
    ## GCSLITERAL caveat.
    grep -H -n -E '<(gitcommitstop|GCS)>' "${files[@]}" | grep -v '<GCSLITERAL>' 1>"$tfile" 2>&1
    check "$tfile" \
          "One or more files has an explicit commit stop. Please address." \
          "" #"No explicit commit stops."
fi

##
## Done
##
if ((exitval==0))
then
    pre_commit_ok_echo "Ok to commit"
else
    pre_commit_error_echo "Commit will abort"
fi
exit $exitval

:<<'__PODUSAGE__'
=head1 NAME

pre-commit - a script for the pre-commit hook in git

=head1 SYNOPSIS

   pre-commit [-a] [--quiet] [--help] [--skip ... [ --skip ... ] ]

   pre-commit --help

=head1 DESCRIPTION

This script is not executed directly, but rather by git during a commit. Place
a copy of it in the '.git/hooks' directory of your local repo.  You can test it
by running '.git/hooks/pre-commit' in your current repo; the commit will not
run in this mode, obviously.

You can also run it with --help to get this man page.

This hook performs the following checks and will abort the commit if any fail:

=over 4

=item o emacs backup files

Files matching the format '.#*' and matching a file about to be committed. This
means you haven't saved the file, so you're about to commit something out of
date.

=item o Perl multiline comments.

These are used to temporarily comment out code, usually for testing, should not
be committed.

    =for (later|comparison|comment|review)
    =for (remove|restore)_before_commit

=item o Perl debugger statements.

Don't leave debugger statements of the form

    $DB::s(ingle|tep)

in production code.

=item o The presence of the testing module TestingUtils.

Not available in production, will cause load failure.

     use TestingUtils

=item o Explicit (G)it (C)ommit (S)top.

These will stop a git commit. Use this marker to mark code that you do not want
to get into your repo. Examples would be code changed for
testing/diagnostics. Add as a comment in the language of the file. Perl
examples:

     $foo=bar; ## <gitcommitstop> dev only
     $foo=bar; ## <GCS> dev only

The part in the <> is what is checked; any text after is ignored.

=item o t/bin/apply-[compile-check|perltidy]-everywhere

If these files are found, we run them in case they were not run during
testing. If they fail, the commit is aborted. Skippable with --skip perl (for
both) or --skip perlcompile and --skip perltidy.

=item o shellcheck

If shellcheck is available (and --skip shellcheck not specified), runs
shellcheck against any file being checked in where the first line looks like a
shell shebang or an emacs shell file marker.

=item o git merge conflict markers

We don't let you commit code with conflict markers.

=back

=head1 ARGUMENTS

None

<soapbox> You'd think that git would pass us the files it's about to commit,
but no; we have to run 'git status --porcelain' and parse the output determine
what files are about to be committed. </soapbox>

=over 4

=back

=head1 OPTIONS

When running during a real commit, options must be passed in the envvar
GIT_PRE_COMMIT_HOOK_ARGS (or the shorter GPCHA) as a single string before the
git command:

    GIT_PRE_COMMIT_HOOK_ARGS="--quiet --skip perltidy" git commit ...

Note that we filter out '--help' and '-a' if you specify them; they do not
apply when using the hook in a real commit. They are only provided for use when
you are running the hook itself as a script.

=over 4

=item -a

Mimic the '-a' of 'git commit' and process all files that are modified, staged
or not. This is only needed for test mode; in live mode, if you pass '-a' to 'git
commit', by the time the hook is invoked, even the non-staged files appear to be
staged. Do NOT use this on a real commit; let the commit command Do The Right
Thing.

=item --quiet

Do not print the progress messages from the hook.

=item --skip

Skip one or more validations:

  perlcompile
  perltidy
  perl (both compile and tidy)
  shellcheck
  shell (short for shellcheck)

In order to just skip the whole hook, use the '--no-verify' option to 'git
commit'.

=back

=head1 FILES

=over 4

=item .pre-commit-ignore file

Like .git-ignore, if there are files you do not want to be checked in the hook,
add them to .pre-commit-ignore. At this time, no wildcards or plain directories
are accepted. Each line must be a full file path relative to the root of the
git repo. Make sure the last line ends in a newline or you'll miss the last
entry in the file.

=back

=cut

__PODUSAGE__
